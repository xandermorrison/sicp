(define (make-interval a b) (cons a b))

(define (lower-bound interval) (car interval))
(define (upper-bound interval) (cdr interval))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
		 (- (upper-bound x) (lower-bound y))))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
		 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
	(p2 (* (lower-bound x) (upper-bound y)))
	(p3 (* (upper-bound x) (lower-bound y)))
	(p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(define (mul-interval2 x y)
  (let ((x-low (lower-bound x))
	(y-low (lower-bound y))
	(x-up (upper-bound x))
	(y-up (upper-bound y)))
    (cond ((and (>= x-low 0)
		(>= y-low 0)
		(>= x-up 0)
		(>= y-up 0))
	   (make-interval (* x-low y-low) (* x-up y-up)))
	  ((and (>= x-low 0)
		(<= y-low 0)
		(>= x-up 0)
		(>= y-up 0))
	   (make-interval (* x-up y-low) (* x-up y-up)))
	  ((and (>= x-low 0)
		(<= y-low 0)
		(>= x-up 0)
		(<= y-up 0))
	   (make-interval (* x-up y-low) (* x-low y-up)))
	  ((and (<= x-low 0)
		(>= y-low 0)
		(>= x-up 0)
		(>= y-up 0))
	   (make-interval (* x-low y-up) (* x-up y-up)))
	  ((and (<= x-low 0)
		(<= y-low 0)
		(>= x-up 0)
		(>= y-up 0))
	   (make-interval (min (* x-up y-low) (* x-low y-up))
			  (max (* x-low y-low) (* x-up y-up))))
	  ((and (<= x-low 0)
		(<= y-low 0)
		(>= x-up 0)
		(<= y-up 0))
	   (make-interval (* x-up y-low) (* x-low y-low)))
	  ((and (<= x-low 0)
		(>= y-low 0)
		(<= x-up 0)
		(>= y-up 0))
	   (make-interval (* x-low y-up) (* x-up y-low)))
	  ((and (<= x-low 0)
		(<= y-low 0)
		(<= x-up 0)
		(>= y-up 0))
	   (make-interval (* x-low y-up) (* x-low y-low)))
	  ((and (<= x-low 0)
		(<= y-low 0)
		(<= x-up 0)
		(<= y-up 0))
	   (make-interval (* x-up y-up) (* x-low y-low))))))
	       

(define (div-interval x y)
  (if (and (<= (lower-bound y))
	   (>= (upper-bound y)))
      (error "Denominator can't span 0")
      (mul-interval
       x
       (make-interval (/ 1.0 (upper-bound y))
		      (/ 1.0 (lower-bound y))))))


(define a (make-interval 2 4))
(define b (make-interval -2 4))
(define c (make-interval -4 -2))

(mul-interval2 a a)
(mul-interval2 a b)
(mul-interval2 a c)
(mul-interval2 b a)
(mul-interval2 b b)
(mul-interval2 b c)
(mul-interval2 c a)
(mul-interval2 c b)
(mul-interval2 c c)

